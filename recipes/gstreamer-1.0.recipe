# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python
import shutil

GST_CONFIG_UNVERSAL='''\
#ifdef __i386__
#include "i386/gstconfig.h"
#elif defined(__ppc__)
#include "ppc/gstconfig.h"
#elif defined(__x86_64__)
#include "x86_64/gstconfig.h"
#elif defined(__arm__)
#include "arm/gstconfig.h"
#else
#error "Unsupported Architecture"
#endif
'''

class Recipe(recipe.Recipe):
    name = 'gstreamer-1.0'
    version = '1.3'
    licenses = [License.LGPLv2_1Plus]
    config_sh = 'sh ./autogen.sh --noconfigure && ./configure'
    configure_options = "--enable-static --program-prefix= --disable-examples "
    commit = 'origin/master'
    deps = ['glib', 'gtk-doc-lite']

    files_bins = ['gst-inspect-1.0',
                  'gst-typefind-1.0',
                  'gst-launch-1.0']

    files_libs = ['libgstbase-1.0', 'libgstcontroller-1.0',
                  'libgstnet-1.0', 'libgstreamer-1.0']

    platform_files_libs = {
        Platform.LINUX: ['libgstcheck-1.0'],
        Platform.ANDROID: ['libgstcheck-1.0'],
        Platform.DARWIN: ['libgstcheck-1.0'],
    }

    files_plugins_core = ['lib/gstreamer-1.0/libgstcoreelements%(mext)s']

    files_misc = ['libexec/gstreamer-1.0/gst-plugin-scanner%(bext)s']

    files_devel = [
            'include/gstreamer-1.0/gst/*.h',
            'include/gstreamer-1.0/gst/base',
            'include/gstreamer-1.0/gst/controller',
            'include/gstreamer-1.0/gst/net',
            'lib/pkgconfig/gstreamer-1.0.pc',
            'lib/pkgconfig/gstreamer-base-1.0.pc',
            'lib/pkgconfig/gstreamer-controller-1.0.pc',
            'lib/pkgconfig/gstreamer-net-1.0.pc',
    ]

    platform_files_devel = {
        Platform.LINUX: ['include/gstreamer-1.0/gst/check', 'lib/pkgconfig/gstreamer-check-1.0.pc', 'share/aclocal/gst-element-check-1.0.m4'],
        Platform.ANDROID: ['include/gstreamer-1.0/gst/check', 'lib/pkgconfig/gstreamer-check-1.0.pc', 'share/aclocal/gst-element-check-1.0.m4'],
        Platform.DARWIN: ['include/gstreamer-1.0/gst/check', 'lib/pkgconfig/gstreamer-check-1.0.pc', 'share/aclocal/gst-element-check-1.0.m4'],
    }

    files_lang = ['gstreamer-1.0']

    files_typelibs = [
        'Gst-1.0',
        'GstBase-1.0',
        'GstCheck-1.0',
        'GstController-1.0',
        'GstNet-1.0'
        ]


    def prepare(self):
        self.remotes['origin'] = ('%s/%s' % ('git://anongit.freedesktop.org/gstreamer', 'gstreamer'))
        self.remotes['upstream'] = self.remotes['origin']

        self.append_env['CFLAGS'] = " -Wno-error "
        self.append_env['CXXFLAGS'] = " -Wno-error "
        self.append_env['CPPFLAGS'] = " -Wno-error "
        if self.config.target_platform != Platform.LINUX:
            self.configure_options += ' --disable-gtk-doc --disable-docbook'

        if self.config.target_platform == Platform.IOS:
            # iOS only supports static builds so plugins must be linked
            # and registered statically.
            self.configure_options += ' --disable-registry '

        if self.config.variants.nodebug:
            self.configure_options += ' --disable-gst-debug'

        if self.config.target_platform in [Platform.DARWIN, Platform.IOS]:
            arch = self.config.target_arch
            if arch == Architecture.X86:
                arch = 'i386'
            elif Architecture.is_arm(arch):
                arch = 'arm'
            self.files_devel.append(os.path.join('include', 'gstreamer-1.0', 'gst', '*', 'gstconfig.h'))

    def post_install(self):
        if self.config.target_platform in [Platform.DARWIN, Platform.IOS]:
            # For the universal build we need to ship gstconfig.h of both
            # architectures in a subfolder and include the correct one depending
            # on the compiler architecture
            arch = self.config.target_arch
            if arch == Architecture.X86:
                arch = 'i386'
            elif Architecture.is_arm(arch):
                arch = 'arm'

            arch_dir = os.path.join(self.config.prefix, 'include', 'gstreamer-1.0',
                                     'gst', arch)
            if not os.path.exists(arch_dir):
                os.makedirs(arch_dir)
            shutil.copyfile(os.path.join(self.build_dir, 'gst', 'gstconfig.h'),
                        os.path.join(arch_dir, 'gstconfig.h'))
            with open(os.path.join(self.config.prefix, 'include', 'gstreamer-1.0',
                                   'gst', 'gstconfig.h'), 'w+') as f:
                f.write(GST_CONFIG_UNVERSAL)
